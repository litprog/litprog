after the specified file has been updated[^fnote_redo]

[^fnote_redo]: [@apenwarr][href_twitter_apenwarr] has written enough about the [pitfalls of detecting changes using mtime comparison][href_apenwarr_mtime]. For now, LitProg will detect changes based on mtime changes alone. In future it will hopefully take the recommended approach: Keeping a database/index of files and fall back on content hashing only as an optimization when file system metadata cannot be relied upon to determine if a dependency has changed.

[href_twitter_apenwarr]: https://twitter.com/apenwarr

[href_apenwarr_mtime]: https://apenwarr.ca/log/20181113



To illustrate, I'll introduce a build script which processes the `examples/fib_cli.py` file (which is an output generated in phase 2 of `litprog build`). This block writes `examples/fib_cli_compat.py` which can be run with a Python 2 interpreter.

```bash
# exec: bash
# requires: examples/fib_cli.py
python3 -m lib3to6 examples/fib_cli.py \
    > examples/fib_cli_compat.py
```

```bash
# run: python2 examples/fib_cli_compat.py 22
# requires: examples/fib_cli_compat.py
! Traceback (most recent call last):
!   File "examples/fib_cli_compat.py", line 7, in <module>
!     from typing import Tuple, List, Dict, Set, Sequence
! ImportError: No module named typing
# exit: 1
```

```bash
# run: python3 --version
Python 3.8.6
# exit: 0
```

```bash
# run: python3 examples/fib_cli_compat.py 22
# require: examples/fib_cli_compat.py
17711
# exit: 0
```

```bash
# run: python3 examples/fib_cli_compat.py --pretty 2 5 8 12 19 20
fib( 2) =>    1  fib( 5) =>    5  fib( 8) =>   21
fib(12) =>  144  fib(19) => 4181  fib(20) => 6765
# exit: 0
```

These examples are intended as a quick overview, but there is much more to be said about the how each of these primitives can be used and misused.



[^fnote_good_enough_docs]: The documentation should be good enough for practical use. The effort devoted to the quality of the various artifacts corresponds to the use cases I anticipate. The PDF/print output is presumed to be used primarily as linearly read reference material. This means, it is draft quality rather than print quality as the files are intended for a few people to review, rather than for widespread publication. A feature of such output might be to annotate each definition with page numbers where it is used and vis-versa to annotate each usage with a page number for its definition. I've not put in the effort to do that, if you're diving that deep into the material, you should use the HTML, the Markdown source or the generated code, where you have proper jump to definition and search.
